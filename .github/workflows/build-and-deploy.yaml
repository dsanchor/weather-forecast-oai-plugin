name: Build and deploy to AKS

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: weather-forecast-oai-plugin
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  NAMESPACE: ${{ secrets.AKS_NAMESPACE }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          distribution: 'microsoft'

      - name: Build with Maven
        run: mvn package

      - name: Login to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy app to AKS
        run: |
          sed -i "s/\$IMAGE/ghcr.io\/${{ github.repository_owner }}\/${{ env.IMAGE_NAME }}\:${{ github.sha }}/g" k8s/application.yaml
          sed -i "s/\$CLIENT_AZUREOPENAI_KEY/${{ secrets.CLIENT_AZUREOPENAI_KEY }}/g" k8s/application.yaml
          sed -i "s/\$CLIENT_AZUREOPENAI_ENDPOINT/${{ secrets.CLIENT_AZUREOPENAI_ENDPOINT }}/g" k8s/application.yaml
          sed -i "s/\$CLIENT_AZUREOPENAI_DEPLOYMENTNAME/${{ secrets.CLIENT_AZUREOPENAI_DEPLOYMENTNAME }}/g" k8s/application.yaml          
          kubectl apply -f k8s/application.yaml -n ${{ env.NAMESPACE }}

      - name: Update with Service IP
        run: |
          SVC_IP=""
          while [ -z "$SVC_IP" ]; do
            SVC_IP=$(kubectl get svc weather-forecast-oai-plugin \
             -o jsonpath='{.status.loadBalancer.ingress[0].ip}' \
             -n ${{ env.NAMESPACE }}) 
            sleep 5
          done
          sed -i "s/\$OAI_PLUGIN_BASEURL/http:\/\/$SVC_IP\:8080/g" k8s/application.yaml
          kubectl apply -f k8s/application.yaml -n ${{ env.NAMESPACE }}